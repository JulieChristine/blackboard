<div id="content">
  <section>
<div>
<h1>Angular js Objectives</h1>
<div>
    <p>In this section, we will be learning about how to build basic AngularJS apps using Angular 2 and the build tools from last week. </p>
    <ul>
        <li>First, we'll learn about a new language called TypeScript. <strong>TypeScript</strong> is a superset of JavaScript. It provides extra tools and syntax for class declarations and data types in order to make code more maintainable, and compiles into regular JavaScript. </li>
        <li>Second, weâ€™ll learn how to use TypeScript to create <strong>Angular 2</strong> apps. We will continue to use the build tools from last week in our development workflow as well.</li>
    </ul>
    <h3>Homework Distribution</h3>
    <p><strong>Note:</strong> This section contains a large amount of homework in the early portion of the week. This is intentional. We have found the best way to internalize it is to spend the entire rest of the week practicing what you see over the weekend. If you don't understand everything at first, don't worry. Get comfortable with the basic ideas first, then slowly hone in on the details. Don't get hung up on any one concept at first glance. Get a feel for the syntax and the structure used in TypeScript and Angular 2. As you practice using these tools the smaller details will become clearer.</p>
    <p>In our first discussion of TypeScript syntax, put your focus on basic variable <strong>type annotations</strong> and <strong>class declarations</strong>. Interfaces and inheritance are very useful and interesting topics, and you should be familiar for later when you may encounter them, but you will use them less frequently. </p>
    <p>As we progress to the Angular 2 lessons, you will see that there are a lot of them, but each lesson is fairly brief. They are intended to be a guide to building your apps. Each lesson adds another piece of functionality to a single app! No need to memorize at first, but <strong>do not copy and paste from these lessons. You will miss crucial details if you do not write the syntax yourself.</strong> </p>
    <p>These lessons will act as a structural roadmap for approaching Angular 2 apps. A to-do list is concerned with keeping track of Task objects. But in your project, you could use any object. Thus, the first lessons talk about how to construct the class declaration for your data object (books, restaurants, beers, anything) and how to structure your app around it. The next lesson talks about how to display an object's data, followed by displaying multiple objects. The next step in the lessons is concerned with how to add interactivity - we want to be able to click on a task and have the interface react. We will then want to be able to use forms to edit and create objects. Finally we will want to be able to sort them into categories - things like which tasks are complete or incomplete. To do that, we need something called a <strong>pipe</strong>. </p>
    <p>At the end of the week, you should be able to:</p>
    <ul>
        <li>Have a solid grasp of how the Model-View-Controller (MVC) pattern is used within an Angular 2 app.</li>
        <li>Use TypeScript syntax as you write your apps.</li>
        <li>Manage build dependencies with npm.</li>
        <li>Manage front-end dependencies with Bower.</li>
        <li>Manage your development workflow with gulp.</li>
        <li>Write a basic Angular2 app using a model, multiple components, forms, event emitters and pipes.</li>
    </ul>
    <h3>Independent Project Objectives</h3>
    <p>Your code at the end of the week will be reviewed for the following:</p>
    <ul>
        <li>Does the website work as expected?</li>
        <li>Is the app structured in a logical way, including a model, multiple components and TypeScript syntax?</li>
        <li>Does the app allow you to create and edit new instances of a model?</li>
        <li>Does the app include a list of models?</li>
        <li>Does the app allow you filter the list of models based on a given criteria? (For example, in a To-Do List app, we may want to view the tasks that are incomplete separately from old tasks that are completed.)</li>
        <li>Do you manage your build tool dependencies with npm?</li>
        <li>Do you manage your front-end dependencies with Bower?</li>
        <li>Does the app include a gulp-based asset pipeline with a development server? Does the asset pipeline include all tasks from the homework this week?</li>
        <li>Does the code stick to standards from previous weeks? (Testing is not required this week.)</li>
        <li>Are you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology?</li>
    </ul>
</div>
</div></section>
</div>
